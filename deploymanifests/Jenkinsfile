#!/usr/bin/env groovy
// 项目全局配置信息(建立代码仓库时由开发人员或运维配置)
// 项目的名称
def ProjectName = "chzh-hrx"
// 项目下的应用名称(项目只有一个应用时,两者相同)
def AppName = "chzh-hrxs"
// 项目的域名
def WebDomainName = "chzh-hrxs.qa.ichzh.com"
// 项目基于域名的访问路径
def ProjectPath = "/easy4enrolwas"
// 项目的git仓库地址
def GitAddress = "git@git.chzh.cn:java/CHZH-HRXS-easy4enrolwas.git"
// 项目代码工程类型，可选参数"ant", "maven", "php"
def CodeType = "maven"

// ----------我----------是----------隔----------离----------线----------
// ----------下-----面-----内-----容-----请-----勿-----修-----改----------

@Library('pipelinesharelibrary') _

def tools = new org.devops.tools()
def buildinfo = new org.devops.buildinfo()
def codecheckout = new org.devops.codecheckout()
def codecompile = new org.devops.codecompile()
def docker = new org.devops.docker()
def deploy2k8s = new org.devops.deploy2k8s()
def dingmes = new org.devops.dingmes()

// 流水线内部变量
// 捕捉到的错误信息
def CatchInfo

// 流水线内容
pipeline {
    agent {
        kubernetes{
            cloud 'kubernetes'
            label "jenkins-slave-${UUID.randomUUID().toString()}"
            activeDeadlineSeconds '30'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-slave
  labels:
    jenkins: slave
spec:
  imagePullSecrets:
    - name: registry-pull-secret
  containers:
  - name: jnlp
    image: hub-1.chzh.cn/jenkins_slave/jdk_8u191-maven_3.6.1:v1.0
    imagePullPolicy: Always
    tty: false
    volumeMounts:
      - name: m2
        mountPath: /root/.m2
        readonly: false
      - name: docker
        mountPath: /usr/bin/docker
        readonly: false
      - name: dockersock
        mountPath: /var/run/docker.sock
        readonly: false
      - name: kubectl
        mountPath: /usr/local/bin/kubectl
        readonly: false
  restartPolicy: Never
  volumes:
    - name: m2
      hostPath:
        path: /var/run/m2
        type: DirectoryOrCreate
    - name: docker
      hostPath:
        path: /usr/bin/docker
        type: File
    - name: dockersock
      hostPath:
        path: /var/run/docker.sock
        type: Socket
    - name: kubectl
      hostPath:
        path: /usr/bin/kubectl
        type: File
            """
        }
    }
    environment{
        // 获取当前时间
        NowDate = new Date().format('yyyy-MM-dd HH:mm:ss');
        // 镜像仓库地址
        DockerRegistry = "hub-1.chzh.cn"
        // 认证凭据
        ImageSecret = "registry-pull-secret"
        DockerRegistryAuth = "harborauth"
        GitlabCredential = "jenkinsfromgitlab"
        // ConfigFileProvider
        k8sConfig = "k8sConfig"
    }
    options{
        // 保留20次构建历史
        buildDiscarder(logRotator(numToKeepStr: '20'))
        // 在agent指令中跳过从源代码控制中检出代码的默认情况
        skipDefaultCheckout()
        // 一旦构建状态变得UNSTABLE则跳过该阶段
        skipStagesAfterUnstable()
        // 设置流水线运行的超过15分钟，Jenkins将中止流水线
        timeout(time: 15, unit: 'MINUTES')
        // 失败时,重新尝试整个流水线的指定次数
        retry(1)
        // 输出构建的时间信息
        timestamps()
    }
    parameters{
        gitParameter(
            branch: '', 
            branchFilter: 'origin/(.*)', 
            defaultValue: 'master', 
            description: '<h3>部署的分支或者tag</h3>', 
            name: 'BranchOrTag', 
            quickFilterEnabled: true, 
            selectedValue: 'NONE', 
            sortMode: 'ASCENDING_SMART', 
            tagFilter: '*', 
            type: 'PT_BRANCH_TAG'
        )
        string(
            name: 'JavaJvm',
            defaultValue: '-server -Xms256M -Xmx2048M -XX:MaxNewSize=256M -XX:MetaspaceSize=512M -XX:MaxMetaspaceSize=512M',
            description: '<h3>Java JVM参数</h3>'
        )
        choice(
            name: 'LimitMemory', 
            choices: ['2Gi', '4Gi', '8Gi'], 
            description: '<h3>容器限制的最大内存</h3>'
        )
        choice(
            name: 'LimitCpu', 
            choices: ['1', '2', '4', '8'], 
            description: '<h3>容器限制的CPU核数</h3>'
        )
        choice(
            name: 'PodReplicas', 
            choices: ['1', '2', '4', '0'], 
            description: '<h3>容器的副本个数(用于手动扩容)</h3>'
        )
        choice(
            name: 'ProbeInitialDelay', 
            choices: ['60', '80', '100'], 
            description: '<h3>探针初始化延迟时间</h3>'
        )
        choice(
            name: 'ClientTimeOut', 
            choices: ['60', '180', '300', '600'], 
            description: '<h3>客户端超时时间(S为单位)</h3>'
        )
        choice(
            name: 'ClientMaxSize', 
            choices: ['2m', '5m', '10m', '20m'], 
            description: '<h3>客户端单个文件上传大小(M为单位)</h3>'
        )
    }
    stages {
        stage('Build Info'){
            steps{
                script {
                    tools.PrintMes("========输出构建信息========",'green')
                    buildinfo.BuildInfo(BranchOrTag)
                }
            }
        }
        stage('Git Checkout'){
            steps{
                script{
                    tools.PrintMes("========代码检出========",'green')
                    try{
                        (ImageTag,ImageName) = codecheckout.GetCode(GitAddress,BranchOrTag,GitlabCredential,DockerRegistry,ProjectName,AppName)
                    } catch (exc) {
                        echo "代码检出失败 - ${currentBuild.fullDisplayName}"
                        CatchInfo = "代码检出失败"
                        throw(exc)
                    }                    
                }
            }
        }
        stage('Compile Code'){
            steps{
                script{
                    tools.PrintMes("========代码编译========",'green')
                    try {
                        codecompile.CodeCompile(CodeType)
                    }
                    catch (exc) {
                        echo = "代码编译失败 - ${currentBuild.fullDisplayName}"
                        CatchInfo = "代码编译失败"
                        throw(exc)
                    }
                }
            }
        }
        stage('Build and Push Docker Image'){
            steps{
                script{
                    tools.PrintMes("========打包和推送镜像========",'green')
                    try {
                        docker.Docker(CodeType,ProjectPath,ImageName,DockerRegistry)
                        withCredentials([usernamePassword(credentialsId: 'aliyunhub', usernameVariable: 'username', passwordVariable: 'password')]) {
                            sh """
                                docker login -u "${username}" -p "${password}" registry.cn-beijing.aliyuncs.com
                                docker tag "${ImageName}" registry.cn-beijing.aliyuncs.com/"${ProjectName}"/"${AppName}":"${ImageTag}"
                                docker push registry.cn-beijing.aliyuncs.com/"${ProjectName}"/"${AppName}":"${ImageTag}"
                            """ 
                        }
                    }
                    catch (exc) {
                        echo "打包和推送镜像失败 - ${currentBuild.fullDisplayName}"
                        CatchInfo = "打包和推送镜像失败"
                        throw(exc)
                    }
                }
            }
        }
        stage('Deploy to Kubernetes'){
            steps{
                script{
                    tools.PrintMes("========部署到k8s========",'green')
                    try {
                        deploy2k8s.Deploy2k8s(CodeType,ProjectName,AppName,ImageName,JavaJvm,PodReplicas,LimitCpu,LimitMemory,ProbeInitialDelay,ClientMaxSize,ClientTimeOut,WebDomainName,ProjectPath)
                    }
                    catch (exc) {
                        echo = "部署到k8s失败 - ${currentBuild.fullDisplayName}"
                        CatchInfo = "部署到k8s失败"
                        throw(exc)
                    }
                }
            }
        }
    }
    post{
        success{
            script{
                tools.PrintMes("========pipeline executed successfully========",'green')
                dingmes.HttpReq(AppName,ImageTag,"构建成功 ✅")
            }
        }
        failure{
            script{
                tools.PrintMes("========pipeline execution failed========",'red')
                dingmes.HttpReq(AppName,ImageTag,"构建失败 ❌",CatchInfo)
            }
        }
        unstable{
            script{
                tools.PrintMes("========pipeline execution unstable========",'red')
                dingmes.HttpReq(AppName,ImageTag,"构建失败 ❌","不稳定异常")
            }
        }
        aborted{
            script{
                tools.PrintMes("========pipeline execution aborted========",'blue')
                dingmes.HttpReq(AppName,ImageTag,"构建失败 ❌","暂停或中断")
            }
        }
    }
}