apiVersion: v1
kind: ConfigMap
metadata:
  name: AppName-redis-conf
  namespace: default
data:
  redis.conf: |
    protected-mode no
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile /data/redis.log
    databases 16
    always-show-logo yes
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-disable-tcp-nodelay no
    replica-priority 100
    requirepass physicalFitness
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    lua-time-limit 5000
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events ""
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    dynamic-hz yes
    aof-rewrite-incremental-fsync yes
    rdb-save-incremental-fsync yes

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-AppName
  namespace: default
spec:
  selector:
    matchLabels:
      project: redis-ProjectName
      app: redis-AppName
  serviceName: redis-AppName
  template:
    metadata:
      labels:
        project: redis-ProjectName
        app: redis-AppName
    spec:
      imagePullSecrets:
      - name: registry-pull-secret
      containers:
      - name: redis
        image: hub-1.chzh.cn/basic_image/redis:5.0.8
        imagePullPolicy: IfNotPresent
        env: 
        - name: TZ
          value: 'Asia/Shanghai'
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1
            memory: 2Gi
        command:
          - "redis-server"
        args:
          - "/etc/redis/redis.conf"
          - "--protected-mode"
          - "no"
        volumeMounts:
          - name: redis-conf
            mountPath: /etc/redis/redis.conf
            subPath: redis.conf
          - name: redis-data
            mountPath: /data
      volumes:
      - name: redis-conf
        configMap:
          name: AppName-redis-conf
          items:
            - key: redis.conf
              path: redis.conf
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-AppName-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-AppName-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "managed-nfs-storage"
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis-AppName
  namespace: default
  labels:
    app: redis
spec:
  clusterIP: None
  ports:
  - name: redis-port
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    project: redis-ProjectName
    app: redis-AppName

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: AppName
  namespace: default
spec:
  replicas: PodReplicas
  selector:
    matchLabels:
      project: ProjectName
      app: AppName
  template:
    metadata:
      labels:
        project: ProjectName
        app: AppName
    spec:
      imagePullSecrets:
      - name: registry-pull-secret
      containers:
      - name: AppName
        image: ImageName
        imagePullPolicy: Always
        env:
        - name: JAVA_OPTS
          value: 'JavaJvm'
        - name: REDIS_HOST
          value: 'redis-chzh-hrxs'
        - name: REDIS_PORT
          value: '6379'
        - name: REDIS_PASSWORD
          value: 'physicalFitness'
        ports:
        - containerPort: 8080
          name: AppName
          protocol: TCP
        resources:
          requests:
            cpu: 0.2
            memory: 0.5Gi
          limits:
            cpu: LimitCpu
            memory: LimitMemory
        livenessProbe:
          httpGet:
            path: ProjectPath
            port: 8080
          initialDelaySeconds: ProbeInitialDelay
          timeoutSeconds: 20
        readinessProbe:
          httpGet:
            path: ProjectPath
            port: 8080
          initialDelaySeconds: ProbeInitialDelay
          timeoutSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: AppName
  namespace: default
spec:
  sessionAffinity: ClientIP
  sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 10800
  selector:
    project: ProjectName
    app: AppName
  ports:
  - name: AppName
    port: 80
    targetPort: 8080

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: AppName
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
    nginx.ingress.kubernetes.io/proxy-body-size: "ClientMaxSize"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "ClientTimeOut"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "ClientTimeOut"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "ClientTimeOut"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/app-root: /physicalFitness
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - WebDomainName
    secretName: AppName
  rules:
    - host: WebDomainName
      http:
        paths:
        - path: ProjectPath
          backend:
            serviceName: AppName
            servicePort: 80
          path: /